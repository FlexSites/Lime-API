scalar DateTime
scalar Url

type Query {
  node(id: ID!): Node!
}

type Mutation {
  recordMetric(input: RecordMetricInput): RecordMetricPayload
}

input RecordMetricInput {
  clientMutationId: ID!
  key: String
  value: String
}

type RecordMetricPayload {
  clientMutationId: ID!
  key: String
  value: Float
}

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  edges: [ Edge! ]!
  pageInfo: PageInfo!
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Meta {
  title: String!
  description: String
  image: Url
}

input MetaInput {
  title: String!
  description: String
  image: Url
}

interface Page {
  meta: Meta!
}

enum STATUS {
  ACTIVE
  INACTIVE
  ARCHIVED
}

# Only customer and staff
type Order implements Node {
  id: ID!
  user: User
  created: DateTime
  tickets: [ Ticket ]
}

type User implements Node {
  id: ID!
  name: String!
}


type Ticket implements Node {
  id: ID!
  order: Order
  type: String
}
